{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nimport { redirect } from 'react-router-dom';\nconst useAuthStore = create()(devtools(immer(persist((set, get) => ({\n  usernameField: '',\n  emailField: '',\n  passwordField: '',\n  checkPasswordField: '',\n  register: async (email, username, password) => {\n    await API.post(`/auth/register`, {\n      email,\n      username,\n      password\n    }).then(data => {\n      if (data.data.email) {\n        return redirect('/auth/login');\n      }\n    });\n  },\n  login: async (email, password) => {\n    await API.post(`/auth/login`, {\n      email: 'example@mail.ru',\n      password: '567asd111'\n    }).then(data => {\n      localStorage.setItem('token', data.data.accessToken);\n    });\n  }\n}), {\n  name: 'auth-store'\n}))));\nexport default useAuthStore;","map":{"version":3,"names":["create","persist","devtools","immer","API","redirect","useAuthStore","set","get","usernameField","emailField","passwordField","checkPasswordField","register","email","username","password","post","then","data","login","localStorage","setItem","accessToken","name"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\nimport { AxiosResponse } from 'axios';\r\nimport { redirect } from 'react-router-dom';\r\n\r\ninterface ISTORE {\r\n    usernameField: string,\r\n    emailField: string,\r\n    passwordField: string,\r\n    checkPasswordField: string,\r\n    register: (email: string, username: string, password: string) => void,\r\n    login: (email: string, password: string) => void\r\n}\r\n\r\nconst useAuthStore = create<ISTORE>()(devtools(immer(persist((set, get) => ({\r\n    usernameField: '',\r\n    emailField: '',\r\n    passwordField: '',\r\n    checkPasswordField: '',\r\n    register: async (email: string, username: string, password: string) => {\r\n        await API.post(`/auth/register`, { email, username, password }).then((data: AxiosResponse<any>) => {\r\n            if (data.data.email) {\r\n                return redirect('/auth/login');\r\n            }\r\n        });\r\n    },\r\n    login: async (email: string, password: string) => {\r\n        await API.post(`/auth/login`, { email: 'example@mail.ru', password: '567asd111' }).then((data: AxiosResponse<any>) => {\r\n            localStorage.setItem('token', data.data.accessToken);\r\n        });\r\n    }\r\n}),\r\n    {\r\n        name: 'auth-store'\r\n    }\r\n),\r\n),\r\n),\r\n);\r\n\r\nexport default useAuthStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,oBAAoB;AACtD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,GAAG,MAAM,sBAAsB;AAEtC,SAASC,QAAQ,QAAQ,kBAAkB;AAW3C,MAAMC,YAAY,GAAGN,MAAM,CAAS,CAAC,CAACE,QAAQ,CAACC,KAAK,CAACF,OAAO,CAAC,CAACM,GAAG,EAAEC,GAAG,MAAM;EACxEC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE,EAAE;EACjBC,kBAAkB,EAAE,EAAE;EACtBC,QAAQ,EAAE,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,EAAEC,QAAgB,KAAK;IACnE,MAAMZ,GAAG,CAACa,IAAI,CAAC,gBAAgB,EAAE;MAAEH,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,CAAC,CAACE,IAAI,CAAEC,IAAwB,IAAK;MAC/F,IAAIA,IAAI,CAACA,IAAI,CAACL,KAAK,EAAE;QACjB,OAAOT,QAAQ,CAAC,aAAa,CAAC;MAClC;IACJ,CAAC,CAAC;EACN,CAAC;EACDe,KAAK,EAAE,MAAAA,CAAON,KAAa,EAAEE,QAAgB,KAAK;IAC9C,MAAMZ,GAAG,CAACa,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK,EAAE,iBAAiB;MAAEE,QAAQ,EAAE;IAAY,CAAC,CAAC,CAACE,IAAI,CAAEC,IAAwB,IAAK;MAClHE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACA,IAAI,CAACI,WAAW,CAAC;IACxD,CAAC,CAAC;EACN;AACJ,CAAC,CAAC,EACE;EACIC,IAAI,EAAE;AACV,CACJ,CACA,CACA,CACA,CAAC;AAED,eAAelB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}