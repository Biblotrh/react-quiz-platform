{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\n\n//{ name, description, author, questions, results, score }\n\nconst useTestStore = create()(devtools(immer((set, get) => ({\n  test: null,\n  result: '',\n  formError: '',\n  comments: [],\n  score: 0,\n  getTest: async testId => {\n    API.get(`/test/${testId}`).then(res => {\n      set({\n        test: res.data.test\n      });\n    });\n  },\n  createTest: async (name, description, questions, results, score) => {\n    await API.post(`test`, {\n      name,\n      description,\n      questions,\n      results,\n      score\n    });\n  },\n  getComments: async () => {},\n  calculateResult: data => {\n    let score = 0;\n    data.questions.forEach(q => {\n      if (q.selectedAnswer) {\n        score += Number(q.selectedAnswer);\n      }\n    });\n    const currentTest = get().test;\n    if (currentTest !== null) {\n      let computedResult = '';\n      for (let i = 0; i < currentTest.results.length; i++) {\n        const res = currentTest.results[i];\n        if (score >= res.minScore && score <= res.maxScore) {\n          computedResult = res.result;\n          break;\n        }\n      }\n      set({\n        result: computedResult\n      });\n    }\n  },\n  setFormError: err => {\n    set({\n      formError: err\n    });\n  },\n  setScore: num => {\n    set({\n      score: num\n    });\n  }\n}))));\nexport default useTestStore;","map":{"version":3,"names":["create","devtools","immer","API","useTestStore","set","get","test","result","formError","comments","score","getTest","testId","then","res","data","createTest","name","description","questions","results","post","getComments","calculateResult","forEach","q","selectedAnswer","Number","currentTest","computedResult","i","length","minScore","maxScore","setFormError","err","setScore","num"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/testStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\nimport { TestPageFormValues } from '../pages/testPage/TestPage';\r\n\r\nexport type Answer = {\r\n    answer: string,\r\n    points: number\r\n}\r\n\r\nexport interface IQuestion {\r\n    question: string,\r\n    answers: Answer[]\r\n}\r\n\r\nexport type Result = {\r\n    result: string,\r\n    minScore: number,\r\n    maxScore: number\r\n}\r\n\r\nexport interface IComment {\r\n    comment: string,\r\n    author: string,\r\n    likes: number,\r\n    createdAt: string\r\n}\r\n\r\nexport interface Test {\r\n    _id: string,\r\n    name: string,\r\n    description: string,\r\n    author: string,\r\n    questions: IQuestion[],\r\n    results: Result[],\r\n    score: number,\r\n    likes: number,\r\n    comments: string[],\r\n    createdAt: string,\r\n    isUpdated: [],\r\n    __v: number\r\n}\r\n\r\n//{ name, description, author, questions, results, score }\r\n\r\ninterface IStore {\r\n    test: Test | null,\r\n    result: string,\r\n    score: number,\r\n    comments: IComment[],\r\n    formError: string,\r\n    getTest: (testId: string) => void,\r\n    createTest: (name: string, description: string, questions: IQuestion[], results: Result[], score: number) => void,\r\n    getComments: () => void,  // I have to create backend endpoints for this function\r\n    calculateResult: (data: TestPageFormValues) => void,\r\n    setFormError: (err: string) => void,\r\n    setScore: (num: number) => void\r\n}\r\n\r\n\r\nconst useTestStore = create<IStore>()(devtools(immer((set, get) => ({\r\n    test: null,\r\n    result: '',\r\n    formError: '',\r\n    comments: [],\r\n    score: 0,\r\n    getTest: async (testId: string) => {\r\n        API.get(`/test/${testId}`).then(res => {\r\n            set({ test: res.data.test });\r\n        })\r\n    },\r\n    createTest: async (name: string, description: string, questions: IQuestion[], results: Result[], score: number ) => {\r\n        await API.post(`test`, {name, description, questions, results, score });\r\n    },\r\n    getComments: async () => {\r\n\r\n    },\r\n    calculateResult: (data) => {\r\n        let score = 0;\r\n\r\n        data.questions.forEach(q => {\r\n            if (q.selectedAnswer) {\r\n                score += Number(q.selectedAnswer);\r\n            }\r\n        });\r\n\r\n        const currentTest = get().test;\r\n\r\n        if (currentTest !== null) {\r\n            let computedResult = '';\r\n\r\n            for (let i = 0; i < currentTest.results.length; i++) {\r\n                const res = currentTest.results[i];\r\n                if (score >= res.minScore && score <= res.maxScore) {\r\n                    computedResult = res.result;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            set({ result: computedResult });\r\n        }\r\n    },\r\n    setFormError: (err: string) => {\r\n        set({ formError: err });\r\n    },\r\n    setScore: (num: number) => {\r\n        set({ score: num });\r\n    }\r\n}),\r\n),\r\n),\r\n);\r\n\r\nexport default useTestStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,GAAG,MAAM,sBAAsB;;AAyCtC;;AAiBA,MAAMC,YAAY,GAAGJ,MAAM,CAAS,CAAC,CAACC,QAAQ,CAACC,KAAK,CAAC,CAACG,GAAG,EAAEC,GAAG,MAAM;EAChEC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,EAAE;EACVC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,MAAOC,MAAc,IAAK;IAC/BV,GAAG,CAACG,GAAG,CAAC,SAASO,MAAM,EAAE,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACnCV,GAAG,CAAC;QAAEE,IAAI,EAAEQ,GAAG,CAACC,IAAI,CAACT;MAAK,CAAC,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EACDU,UAAU,EAAE,MAAAA,CAAOC,IAAY,EAAEC,WAAmB,EAAEC,SAAsB,EAAEC,OAAiB,EAAEV,KAAa,KAAM;IAChH,MAAMR,GAAG,CAACmB,IAAI,CAAC,MAAM,EAAE;MAACJ,IAAI;MAAEC,WAAW;MAAEC,SAAS;MAAEC,OAAO;MAAEV;IAAM,CAAC,CAAC;EAC3E,CAAC;EACDY,WAAW,EAAE,MAAAA,CAAA,KAAY,CAEzB,CAAC;EACDC,eAAe,EAAGR,IAAI,IAAK;IACvB,IAAIL,KAAK,GAAG,CAAC;IAEbK,IAAI,CAACI,SAAS,CAACK,OAAO,CAACC,CAAC,IAAI;MACxB,IAAIA,CAAC,CAACC,cAAc,EAAE;QAClBhB,KAAK,IAAIiB,MAAM,CAACF,CAAC,CAACC,cAAc,CAAC;MACrC;IACJ,CAAC,CAAC;IAEF,MAAME,WAAW,GAAGvB,GAAG,CAAC,CAAC,CAACC,IAAI;IAE9B,IAAIsB,WAAW,KAAK,IAAI,EAAE;MACtB,IAAIC,cAAc,GAAG,EAAE;MAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACR,OAAO,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;QACjD,MAAMhB,GAAG,GAAGc,WAAW,CAACR,OAAO,CAACU,CAAC,CAAC;QAClC,IAAIpB,KAAK,IAAII,GAAG,CAACkB,QAAQ,IAAItB,KAAK,IAAII,GAAG,CAACmB,QAAQ,EAAE;UAChDJ,cAAc,GAAGf,GAAG,CAACP,MAAM;UAC3B;QACJ;MACJ;MAEAH,GAAG,CAAC;QAAEG,MAAM,EAAEsB;MAAe,CAAC,CAAC;IACnC;EACJ,CAAC;EACDK,YAAY,EAAGC,GAAW,IAAK;IAC3B/B,GAAG,CAAC;MAAEI,SAAS,EAAE2B;IAAI,CAAC,CAAC;EAC3B,CAAC;EACDC,QAAQ,EAAGC,GAAW,IAAK;IACvBjC,GAAG,CAAC;MAAEM,KAAK,EAAE2B;IAAI,CAAC,CAAC;EACvB;AACJ,CAAC,CACD,CACA,CACA,CAAC;AAED,eAAelC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}