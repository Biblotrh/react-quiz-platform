{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nconst useTestStore = create()(devtools(immer(persist((set, get) => ({\n  test: null,\n  result: '',\n  comments: [],\n  getTest: async testId => {\n    API.get(`/test/${testId}`).then(res => {\n      set({\n        test: res.data.test\n      });\n    });\n  },\n  submitTest: async () => {},\n  getComments: async () => {}\n}), {\n  name: 'test-store'\n}))));\nexport default useTestStore;","map":{"version":3,"names":["create","persist","devtools","immer","API","useTestStore","set","get","test","result","comments","getTest","testId","then","res","data","submitTest","getComments","name"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/testStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\n\r\nexport type Answer = {\r\n    answer: string,\r\n    isRight: string,\r\n    points: string\r\n}\r\n\r\nexport type Question = {\r\n    question: string,\r\n    answers: Answer[]\r\n}\r\n\r\nexport type Result = {\r\n    result: string,\r\n    minScore: number,\r\n    maxScore: number\r\n}\r\n\r\nexport interface IComment {\r\n    comment: string,\r\n    author: string,\r\n    likes: number,\r\n    createdAt: string\r\n}\r\n\r\nexport interface Test {\r\n    _id: string,\r\n    name: string,\r\n    description: string,\r\n    author: string,\r\n    questions: Question[],\r\n    results: Result[],\r\n    score: number,\r\n    likes: number,\r\n    comments: string[],\r\n    createdAt: string,\r\n    isUpdated: [],\r\n    __v: number\r\n}\r\n\r\ninterface IStore {\r\n    test: Test | null,\r\n    result: string,\r\n    comments: IComment[],\r\n    getTest: (testId: string) => void,\r\n    submitTest: () => void,\r\n    getComments: () => void // I have to create backend endpoint for this function\r\n}\r\n\r\n\r\nconst useTestStore = create<IStore>()(devtools(immer(persist((set, get) => ({\r\n    test: null,\r\n    result: '',\r\n    comments: [],\r\n    getTest: async (testId: string) => {\r\n        API.get(`/test/${testId}`).then(res => {\r\n            set({ test: res.data.test });\r\n        })\r\n    },\r\n    submitTest: async () => {\r\n\r\n    },\r\n    getComments: async () => {\r\n\r\n    },\r\n}),\r\n    {\r\n        name: 'test-store'\r\n    }\r\n),\r\n),\r\n),\r\n);\r\n\r\nexport default useTestStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,oBAAoB;AACtD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,GAAG,MAAM,sBAAsB;AAmDtC,MAAMC,YAAY,GAAGL,MAAM,CAAS,CAAC,CAACE,QAAQ,CAACC,KAAK,CAACF,OAAO,CAAC,CAACK,GAAG,EAAEC,GAAG,MAAM;EACxEC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,MAAOC,MAAc,IAAK;IAC/BR,GAAG,CAACG,GAAG,CAAC,SAASK,MAAM,EAAE,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACnCR,GAAG,CAAC;QAAEE,IAAI,EAAEM,GAAG,CAACC,IAAI,CAACP;MAAK,CAAC,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EACDQ,UAAU,EAAE,MAAAA,CAAA,KAAY,CAExB,CAAC;EACDC,WAAW,EAAE,MAAAA,CAAA,KAAY,CAEzB;AACJ,CAAC,CAAC,EACE;EACIC,IAAI,EAAE;AACV,CACJ,CACA,CACA,CACA,CAAC;AAED,eAAeb,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}