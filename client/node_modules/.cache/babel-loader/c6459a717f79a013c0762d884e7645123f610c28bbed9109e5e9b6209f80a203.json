{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nconst useTestStore = create()(devtools(immer(persist((set, get) => ({\n  test: null,\n  result: '',\n  comments: [],\n  getTest: async testId => {\n    API.get(`/test/${testId}`).then(res => {\n      set({\n        test: res.data.test\n      });\n    });\n  },\n  submitTest: async () => {},\n  getComments: async () => {},\n  setResult: data => {\n    let score = 0;\n    data.questions.map(q => {\n      if (q.selectedAnswer) {\n        score += Number(q.selectedAnswer);\n      }\n      return score;\n    });\n    if (test && test.results) {\n      for (let i = 0; i < test.results.length; i++) {\n        if (score >= test.results[i].minScore && score <= test.results[i].maxScore) {\n          result = test.results[i].result;\n        }\n      }\n    }\n  }\n}), {\n  name: 'test-store'\n}))));\nexport default useTestStore;","map":{"version":3,"names":["create","persist","devtools","immer","API","useTestStore","set","get","test","result","comments","getTest","testId","then","res","data","submitTest","getComments","setResult","score","questions","map","q","selectedAnswer","Number","results","i","length","minScore","maxScore","name"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/testStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\n\r\nexport type Answer = {\r\n    answer: string,\r\n    isRight: string,\r\n    points: string\r\n}\r\n\r\nexport type Question = {\r\n    question: string,\r\n    answers: Answer[]\r\n}\r\n\r\nexport type Result = {\r\n    result: string,\r\n    minScore: number,\r\n    maxScore: number\r\n}\r\n\r\nexport interface IComment {\r\n    comment: string,\r\n    author: string,\r\n    likes: number,\r\n    createdAt: string\r\n}\r\n\r\nexport interface Test {\r\n    _id: string,\r\n    name: string,\r\n    description: string,\r\n    author: string,\r\n    questions: Question[],\r\n    results: Result[],\r\n    score: number,\r\n    likes: number,\r\n    comments: string[],\r\n    createdAt: string,\r\n    isUpdated: [],\r\n    __v: number\r\n}\r\n\r\ninterface IStore {\r\n    test: Test | null,\r\n    result: string,\r\n    comments: IComment[],\r\n    getTest: (testId: string) => void,\r\n    submitTest: () => void,\r\n    getComments: () => void,  // I have to create backend endpoint for this function\r\n    setResult: (data: {questions: Question & {selectedAnswer: string}[]}) => void,\r\n}\r\n\r\n\r\nconst useTestStore = create<IStore>()(devtools(immer(persist((set, get) => ({\r\n    test: null,\r\n    result: '',\r\n    comments: [],\r\n    getTest: async (testId: string) => {\r\n        API.get(`/test/${testId}`).then(res => {\r\n            set({ test: res.data.test });\r\n        })\r\n    },\r\n    submitTest: async () => {\r\n\r\n    },\r\n    getComments: async () => {\r\n\r\n    },\r\n    setResult: (data) => {\r\n        let score = 0;\r\n        data.questions.map(q => {\r\n            if (q.selectedAnswer) {\r\n                score += Number(q.selectedAnswer);\r\n            }\r\n            return score;\r\n        });\r\n        if (test && test.results) {\r\n            for (let i = 0; i < test.results.length; i++) {\r\n                if (score >= test.results[i].minScore && score <= test.results[i].maxScore) {\r\n                    result = test.results[i].result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}),\r\n    {\r\n        name: 'test-store'\r\n    }\r\n),\r\n),\r\n),\r\n);\r\n\r\nexport default useTestStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,oBAAoB;AACtD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,GAAG,MAAM,sBAAsB;AAoDtC,MAAMC,YAAY,GAAGL,MAAM,CAAS,CAAC,CAACE,QAAQ,CAACC,KAAK,CAACF,OAAO,CAAC,CAACK,GAAG,EAAEC,GAAG,MAAM;EACxEC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,MAAOC,MAAc,IAAK;IAC/BR,GAAG,CAACG,GAAG,CAAC,SAASK,MAAM,EAAE,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACnCR,GAAG,CAAC;QAAEE,IAAI,EAAEM,GAAG,CAACC,IAAI,CAACP;MAAK,CAAC,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EACDQ,UAAU,EAAE,MAAAA,CAAA,KAAY,CAExB,CAAC;EACDC,WAAW,EAAE,MAAAA,CAAA,KAAY,CAEzB,CAAC;EACDC,SAAS,EAAGH,IAAI,IAAK;IACjB,IAAII,KAAK,GAAG,CAAC;IACbJ,IAAI,CAACK,SAAS,CAACC,GAAG,CAACC,CAAC,IAAI;MACpB,IAAIA,CAAC,CAACC,cAAc,EAAE;QAClBJ,KAAK,IAAIK,MAAM,CAACF,CAAC,CAACC,cAAc,CAAC;MACrC;MACA,OAAOJ,KAAK;IAChB,CAAC,CAAC;IACF,IAAIX,IAAI,IAAIA,IAAI,CAACiB,OAAO,EAAE;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,IAAI,CAACiB,OAAO,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1C,IAAIP,KAAK,IAAIX,IAAI,CAACiB,OAAO,CAACC,CAAC,CAAC,CAACE,QAAQ,IAAIT,KAAK,IAAIX,IAAI,CAACiB,OAAO,CAACC,CAAC,CAAC,CAACG,QAAQ,EAAE;UACxEpB,MAAM,GAAGD,IAAI,CAACiB,OAAO,CAACC,CAAC,CAAC,CAACjB,MAAM;QACnC;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC,EACE;EACIqB,IAAI,EAAE;AACV,CACJ,CACA,CACA,CACA,CAAC;AAED,eAAezB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}