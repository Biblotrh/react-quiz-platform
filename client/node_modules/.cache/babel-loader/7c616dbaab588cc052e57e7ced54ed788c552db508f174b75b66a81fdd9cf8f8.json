{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nconst useTestStore = create()(devtools(immer((set, get) => ({\n  test: null,\n  result: '',\n  formError: '',\n  isAnswering: '',\n  comments: [],\n  score: 0,\n  createdTestId: '',\n  getTest: async testId => {\n    API.get(`/test/${testId}`).then(res => {\n      set({\n        test: res.data.test\n      });\n    });\n  },\n  createTest: async (name, description, questions, results, score) => {\n    await API.post(`test`, {\n      name,\n      description,\n      questions,\n      results,\n      score\n    }).then(res => set({\n      createdTestId: res.data.id\n    }));\n  },\n  getComments: async () => {\n    var _get$test;\n    await API.get(`/comment/${(_get$test = get().test) === null || _get$test === void 0 ? void 0 : _get$test._id}`).then(res => {\n      console.log(res.data);\n      set({\n        comments: res.data\n      });\n    }).catch(err => console.log(err));\n  },\n  getAnswers: async commentId => {\n    await API.get(`/comment/${commentId}`).then(res => {\n      get().setAnswers(res.data.answers, commentId);\n    }).catch(err => console.log(err));\n  },\n  calculateResult: data => {\n    let score = 0;\n    data.questions.forEach(q => {\n      if (q.selectedAnswer) {\n        score += Number(q.selectedAnswer);\n      }\n    });\n    const currentTest = get().test;\n    if (currentTest !== null) {\n      let computedResult = '';\n      for (let i = 0; i < currentTest.results.length; i++) {\n        const res = currentTest.results[i];\n        if (score >= res.minScore && score <= res.maxScore) {\n          computedResult = res.result;\n          break;\n        }\n      }\n      set({\n        result: computedResult\n      });\n    }\n  },\n  setFormError: err => {\n    set({\n      formError: err\n    });\n  },\n  setScore: num => {\n    set({\n      score: num\n    });\n  },\n  setAnswers: (answers, parentId) => set(state => ({\n    comments: state.comments.map(comment => {\n      if (comment.createdAt === parentId) {\n        return {\n          ...comment,\n          answers: [...comment.answers, answers]\n        };\n      }\n      return comment;\n    })\n  })),\n  createComment: async comment => {\n    var _get$test2;\n    const testId = (_get$test2 = get().test) === null || _get$test2 === void 0 ? void 0 : _get$test2._id;\n    let comments = get().comments;\n    await API.post(`/comment`, {\n      comment,\n      testId\n    }).then(res => {\n      comments.unshift(res.data.newComment);\n      set({\n        comments: comments\n      });\n    }).catch(err => console.log(err));\n  },\n  createAnswer: async answer => {\n    var _get$test3;\n    const testId = (_get$test3 = get().test) === null || _get$test3 === void 0 ? void 0 : _get$test3._id;\n    let parentId = get().isAnswering;\n    await API.post(`/answer`, {\n      answer,\n      testId,\n      parentId\n    }).then(res => {}).catch(err => console.log(err));\n  },\n  setIsAnswering: val => {\n    set({\n      isAnswering: val\n    });\n  }\n}))));\nexport default useTestStore;","map":{"version":3,"names":["create","devtools","immer","API","useTestStore","set","get","test","result","formError","isAnswering","comments","score","createdTestId","getTest","testId","then","res","data","createTest","name","description","questions","results","post","id","getComments","_get$test","_id","console","log","catch","err","getAnswers","commentId","setAnswers","answers","calculateResult","forEach","q","selectedAnswer","Number","currentTest","computedResult","i","length","minScore","maxScore","setFormError","setScore","num","parentId","state","map","comment","createdAt","createComment","_get$test2","unshift","newComment","createAnswer","answer","_get$test3","setIsAnswering","val"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/testStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\nimport { TestPageFormValues } from '../pages/testPage/TestPage';\r\n\r\nexport type Answer = {\r\n    answer: string,\r\n    points: number\r\n}\r\n\r\nexport interface IQuestion {\r\n    question: string,\r\n    answers: Answer[]\r\n}\r\n\r\nexport type Result = {\r\n    result: string,\r\n    minScore: number,\r\n    maxScore: number\r\n}\r\n\r\nexport interface IComment extends ICommentAnswer {\r\n    answers: ICommentAnswer[],\r\n}\r\n\r\nexport interface ICommentAnswer {\r\n    _id: string,\r\n    comment: string,\r\n    author: {\r\n        username: string,\r\n        _id: string\r\n    },\r\n    likes: number,\r\n    createdAt: string\r\n}\r\n\r\nexport interface Test {\r\n    _id: string,\r\n    name: string,\r\n    description: string,\r\n    author: {\r\n        _id: string,\r\n        username: string\r\n    },\r\n    questions: IQuestion[],\r\n    results: Result[],\r\n    score: number,\r\n    likes: number,\r\n    comments: string[],\r\n    createdAt: string,\r\n    isUpdated: [],\r\n    __v: number\r\n}\r\n\r\ninterface IStore {\r\n    test: Test | null,\r\n    isAnswering: string,\r\n    result: string,\r\n    score: number,\r\n    comments: IComment[],\r\n    formError: string,\r\n    createdTestId: string,\r\n    getTest: (testId: string) => void,\r\n    createTest: (name: string, description: string, questions: IQuestion[], results: Result[], score: number) => void,\r\n    getComments: () => void,\r\n    getAnswers: (commentId: string) => void,\r\n    calculateResult: (data: TestPageFormValues) => void,\r\n    setFormError: (err: string) => void,\r\n    setScore: (num: number) => void,\r\n    setAnswers: (answers: Answer[], parentId: string) => void,\r\n    createComment: (comment: string) => void,\r\n    createAnswer: (answer: string) => void,\r\n    setIsAnswering: (val: string) => void,\r\n}\r\n\r\n\r\nconst useTestStore = create<IStore>()(devtools(immer((set, get) => ({\r\n    test: null,\r\n    result: '',\r\n    formError: '',\r\n    isAnswering: '',\r\n    comments: [],\r\n    score: 0,\r\n    createdTestId: '',\r\n    getTest: async (testId) => {\r\n        API.get(`/test/${testId}`).then(res => {\r\n            set({ test: res.data.test });\r\n        })\r\n    },\r\n    createTest: async (name, description, questions, results, score) => {\r\n        await API.post(`test`, { name, description, questions, results, score }).then(res => set({ createdTestId: res.data.id }));\r\n    },\r\n    getComments: async () => {\r\n        await API.get(`/comment/${get().test?._id}`).then(res => {\r\n            console.log(res.data)\r\n            set({ comments: res.data });\r\n        }).catch(err => console.log(err));\r\n    },\r\n    getAnswers: async (commentId) => {\r\n        await API.get(`/comment/${commentId}`).then(res => {\r\n            get().setAnswers(res.data.answers, commentId);\r\n        }).catch(err => console.log(err));\r\n    },\r\n    calculateResult: (data) => {\r\n        let score = 0;\r\n\r\n        data.questions.forEach(q => {\r\n            if (q.selectedAnswer) {\r\n                score += Number(q.selectedAnswer);\r\n            }\r\n        });\r\n\r\n        const currentTest = get().test;\r\n\r\n        if (currentTest !== null) {\r\n            let computedResult = '';\r\n\r\n            for (let i = 0; i < currentTest.results.length; i++) {\r\n                const res = currentTest.results[i];\r\n                if (score >= res.minScore && score <= res.maxScore) {\r\n                    computedResult = res.result;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            set({ result: computedResult });\r\n        }\r\n    },\r\n    setFormError: (err) => {\r\n        set({ formError: err });\r\n    },\r\n    setScore: (num) => {\r\n        set({ score: num });\r\n    },\r\n    setAnswers: (answers, parentId) => set((state) => ({\r\n        comments: state.comments.map((comment) => {\r\n            if (comment.createdAt === parentId) {\r\n                return {\r\n                    ...comment,\r\n                    answers: [...comment.answers, answers],\r\n                };\r\n            }\r\n            return comment;\r\n        }),\r\n    })),\r\n    createComment: async (comment) => {\r\n        const testId = get().test?._id;\r\n        let comments = get().comments;\r\n        await API.post(`/comment`, {comment, testId}).then(res => {\r\n            comments.unshift(res.data.newComment);\r\n            set({comments: comments});\r\n        }).catch(err => console.log(err));\r\n    },\r\n    createAnswer: async (answer) => {\r\n        const testId = get().test?._id;\r\n        let parentId = get().isAnswering;\r\n        await API.post(`/answer`, {answer, testId, parentId }).then(res => {\r\n            \r\n        }).catch(err => console.log(err));\r\n    },\r\n    setIsAnswering: (val: string) =>  {\r\n        set({isAnswering: val});\r\n    },\r\n}))));\r\n\r\nexport default useTestStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}