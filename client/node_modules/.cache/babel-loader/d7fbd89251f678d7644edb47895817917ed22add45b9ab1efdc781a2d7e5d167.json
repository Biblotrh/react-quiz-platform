{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nconst useTestStore = create()(devtools(immer((set, get) => ({\n  test: null,\n  result: '',\n  formError: '',\n  isUpdating: '',\n  isAnswering: '',\n  comments: [],\n  score: 0,\n  createdTestId: '',\n  getTest: async testId => {\n    API.get(`/test/${testId}`).then(res => {\n      set({\n        test: res.data.test\n      });\n    });\n  },\n  createTest: async (name, description, questions, results, score) => {\n    await API.post(`test`, {\n      name,\n      description,\n      questions,\n      results,\n      score\n    }).then(res => set({\n      createdTestId: res.data.id\n    }));\n  },\n  getComments: async () => {\n    var _get$test;\n    await API.get(`/comment/${(_get$test = get().test) === null || _get$test === void 0 ? void 0 : _get$test._id}`).then(res => {\n      set({\n        comments: res.data\n      });\n    }).catch(err => console.log(err));\n  },\n  getAnswers: async commentId => {\n    await API.get(`/answer/${commentId}`).then(res => {\n      set(state => {\n        state.comments.map(comment => {\n          if (comment._id === commentId) {\n            comment.answers = res.data;\n          }\n          return comment;\n        });\n      });\n    }).catch(err => console.log(err));\n  },\n  calculateResult: data => {\n    let score = 0;\n    data.questions.forEach(q => {\n      if (q.selectedAnswer) {\n        score += Number(q.selectedAnswer);\n      }\n    });\n    const currentTest = get().test;\n    if (currentTest !== null) {\n      let computedResult = '';\n      for (let i = 0; i < currentTest.results.length; i++) {\n        const res = currentTest.results[i];\n        if (score >= res.minScore && score <= res.maxScore) {\n          computedResult = res.result;\n          break;\n        }\n      }\n      set({\n        result: computedResult\n      });\n    }\n  },\n  setFormError: err => {\n    set({\n      formError: err\n    });\n  },\n  setScore: num => {\n    set({\n      score: num\n    });\n  },\n  createComment: async comment => {\n    var _get$test2;\n    const testId = (_get$test2 = get().test) === null || _get$test2 === void 0 ? void 0 : _get$test2._id;\n    await API.post(`/comment`, {\n      comment,\n      testId\n    }).then(res => {\n      set(state => {\n        state.comments.push(res.data.newComment);\n      });\n    }).catch(err => console.log(err));\n  },\n  createAnswer: async answer => {\n    var _get$test3;\n    const testId = (_get$test3 = get().test) === null || _get$test3 === void 0 ? void 0 : _get$test3._id;\n    let parentId = get().isAnswering;\n    await API.post(`/answer`, {\n      answer,\n      testId,\n      parentId\n    }).then(res => {\n      set(state => {\n        state.comments.map(comment => {\n          if (comment._id === parentId) {\n            comment.answers = res.data.newAnswer;\n          }\n          return comment;\n        });\n      });\n    }).catch(err => console.log(err));\n  },\n  updateComment: async (newComment, commentId) => {\n    var _get$test4;\n    const testId = (_get$test4 = get().test) === null || _get$test4 === void 0 ? void 0 : _get$test4._id;\n    await API.put(`/comment`, {\n      comment: commentId,\n      testId,\n      newComment\n    }).then(res => {\n      set(state => {\n        state.comments.map((comment, index) => {\n          if (res.data.updatedComment._id === commentId) {\n            state.comments[index] = res.data.updatedComment;\n          }\n          return comment;\n        });\n      });\n    });\n  },\n  removeComment: async commentId => {\n    var _get$test5;\n    const testId = (_get$test5 = get().test) === null || _get$test5 === void 0 ? void 0 : _get$test5._id;\n    await API.delete(`/comment`, {\n      data: {\n        commentId,\n        testId\n      }\n    }).then(res => {\n      if (res.data.message === 'Success') {\n        set(state => {\n          state.comments.map((comment, index) => {\n            if (comment._id === commentId) {\n              state.comments.splice(index, index);\n            }\n            return comment;\n          });\n        });\n      }\n    });\n  },\n  setIsAnswering: val => {\n    set({\n      isAnswering: val\n    });\n  },\n  setIsUpdating: val => {\n    set({\n      isUpdating: val\n    });\n  }\n}))));\nexport default useTestStore;","map":{"version":3,"names":["create","devtools","immer","API","useTestStore","set","get","test","result","formError","isUpdating","isAnswering","comments","score","createdTestId","getTest","testId","then","res","data","createTest","name","description","questions","results","post","id","getComments","_get$test","_id","catch","err","console","log","getAnswers","commentId","state","map","comment","answers","calculateResult","forEach","q","selectedAnswer","Number","currentTest","computedResult","i","length","minScore","maxScore","setFormError","setScore","num","createComment","_get$test2","push","newComment","createAnswer","answer","_get$test3","parentId","newAnswer","updateComment","_get$test4","put","index","updatedComment","removeComment","_get$test5","delete","message","splice","setIsAnswering","val","setIsUpdating"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/testStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\nimport { TestPageFormValues } from '../pages/testPage/TestPage';\r\n\r\nexport type Answer = {\r\n    answer: string,\r\n    points: number\r\n}\r\n\r\nexport interface IQuestion {\r\n    question: string,\r\n    answers: Answer[]\r\n}\r\n\r\nexport type Result = {\r\n    result: string,\r\n    minScore: number,\r\n    maxScore: number\r\n}\r\n\r\nexport interface IComment extends ICommentAnswer {\r\n    answers: ICommentAnswer[],\r\n}\r\n\r\nexport interface ICommentAnswer {\r\n    _id: string,\r\n    comment: string,\r\n    author: {\r\n        username: string,\r\n        _id: string\r\n    },\r\n    likes: number,\r\n    createdAt: string\r\n}\r\n\r\nexport interface Test {\r\n    _id: string,\r\n    name: string,\r\n    description: string,\r\n    author: {\r\n        _id: string,\r\n        username: string\r\n    },\r\n    questions: IQuestion[],\r\n    results: Result[],\r\n    score: number,\r\n    likes: number,\r\n    comments: string[],\r\n    createdAt: string,\r\n    isUpdated: [],\r\n    __v: number\r\n}\r\n\r\ninterface IStore {\r\n    test: Test | null,\r\n    isAnswering: string,\r\n    isUpdating: string,\r\n    result: string,\r\n    score: number,\r\n    comments: IComment[],\r\n    formError: string,\r\n    createdTestId: string,\r\n    getTest: (testId: string) => void,\r\n    createTest: (name: string, description: string, questions: IQuestion[], results: Result[], score: number) => void,\r\n    getComments: () => void,\r\n    getAnswers: (commentId: string) => void,\r\n    calculateResult: (data: TestPageFormValues) => void,\r\n    setFormError: (err: string) => void,\r\n    setScore: (num: number) => void,\r\n    createComment: (comment: string) => void,\r\n    createAnswer: (answer: string) => void,\r\n    updateComment: (newComment: string, commentId: string) => void,\r\n    removeComment: (commentId: string) => void,\r\n    setIsAnswering: (val: string) => void,\r\n    setIsUpdating: (val: string) => void,\r\n}\r\n\r\n\r\nconst useTestStore = create<IStore>()(devtools(immer((set, get) => ({\r\n    test: null,\r\n    result: '',\r\n    formError: '',\r\n    isUpdating: '',\r\n    isAnswering: '',\r\n    comments: [],\r\n    score: 0,\r\n    createdTestId: '',\r\n    getTest: async (testId) => {\r\n        API.get(`/test/${testId}`).then(res => {\r\n            set({ test: res.data.test });\r\n        })\r\n    },\r\n    createTest: async (name, description, questions, results, score) => {\r\n        await API.post(`test`, { name, description, questions, results, score }).then(res => set({ createdTestId: res.data.id }));\r\n    },\r\n    getComments: async () => {\r\n        await API.get(`/comment/${get().test?._id}`).then(res => {\r\n            set({ comments: res.data });\r\n        }).catch(err => console.log(err));\r\n    },\r\n    getAnswers: async (commentId) => {\r\n        await API.get(`/answer/${commentId}`).then(res => {\r\n            set((state) => {\r\n                state.comments.map(comment => {\r\n                    if (comment._id === commentId) {\r\n                        comment.answers = res.data;\r\n                    }\r\n                    return comment;\r\n                })\r\n            })\r\n        }).catch(err => console.log(err));\r\n    },\r\n    calculateResult: (data) => {\r\n        let score = 0;\r\n\r\n        data.questions.forEach(q => {\r\n            if (q.selectedAnswer) {\r\n                score += Number(q.selectedAnswer);\r\n            }\r\n        });\r\n\r\n        const currentTest = get().test;\r\n\r\n        if (currentTest !== null) {\r\n            let computedResult = '';\r\n\r\n            for (let i = 0; i < currentTest.results.length; i++) {\r\n                const res = currentTest.results[i];\r\n                if (score >= res.minScore && score <= res.maxScore) {\r\n                    computedResult = res.result;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            set({ result: computedResult });\r\n        }\r\n    },\r\n    setFormError: (err) => {\r\n        set({ formError: err });\r\n    },\r\n    setScore: (num) => {\r\n        set({ score: num });\r\n    },\r\n    createComment: async (comment) => {\r\n        const testId = get().test?._id;\r\n        await API.post(`/comment`, { comment, testId }).then(res => {\r\n            set((state) => {\r\n                state.comments.push(res.data.newComment);\r\n            });\r\n        }).catch(err => console.log(err));\r\n    },\r\n    createAnswer: async (answer) => {\r\n        const testId = get().test?._id;\r\n        let parentId = get().isAnswering;\r\n        await API.post(`/answer`, { answer, testId, parentId }).then(res => {\r\n            set((state) => {\r\n                state.comments.map(comment => {\r\n                    if (comment._id === parentId) {\r\n                        comment.answers = res.data.newAnswer;\r\n                    }\r\n                    return comment;\r\n                })\r\n            })\r\n        }).catch(err => console.log(err));\r\n    },\r\n    updateComment: async (newComment, commentId) => {\r\n        const testId = get().test?._id;\r\n        await API.put(`/comment`, { comment: commentId, testId, newComment }).then(res => {\r\n            set((state) => {\r\n                state.comments.map((comment, index) => {\r\n                    if(res.data.updatedComment._id === commentId) {\r\n                        state.comments[index] = res.data.updatedComment;\r\n                    }\r\n                    return comment;\r\n                })\r\n            })\r\n        });\r\n    },\r\n    removeComment: async (commentId) => {\r\n        const testId = get().test?._id;\r\n        await API.delete(`/comment`, { data: { commentId, testId } }).then(res => {\r\n            if(res.data.message === 'Success') {\r\n                set((state) => {\r\n                    state.comments.map((comment, index) => {\r\n                        if(comment._id === commentId) {\r\n                            state.comments.splice(index, index);\r\n                        }\r\n                        return comment\r\n                    })\r\n                })\r\n            }\r\n        });\r\n    },\r\n    setIsAnswering: (val) => {\r\n        set({ isAnswering: val });\r\n    },\r\n    setIsUpdating: (val) => {\r\n        set({ isUpdating: val });\r\n    },\r\n}))));\r\n\r\nexport default useTestStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}