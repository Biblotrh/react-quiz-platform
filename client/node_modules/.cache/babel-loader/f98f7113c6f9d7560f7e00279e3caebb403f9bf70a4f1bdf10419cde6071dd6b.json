{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DoC\\\\Desktop\\\\works\\\\ptest\\\\client\\\\src\\\\pages\\\\testForm\\\\TestForm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styles from './TestForm.module.scss';\nimport useTestStore from '../../stores/testStore';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestForm() {\n  _s();\n  var _errors$name, _errors$name2, _errors$description, _errors$description2, _errors$results, _errors$results2;\n  const formError = useTestStore(state => state.formError);\n  const setError = useTestStore(state => state.setFormError);\n  const setScore = useTestStore(state => state.setScore);\n  const createPost = useTestStore(state => state.createTest);\n  const id = useTestStore(state => state.createdTestId);\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    unregister\n  } = useForm({\n    mode: 'onBlur'\n  });\n  const {\n    fields: questionFields,\n    append: appendQuestion\n  } = useFieldArray({\n    control,\n    name: 'questions'\n  });\n  const {\n    fields: resultFields,\n    append: appendResult\n  } = useFieldArray({\n    control,\n    name: 'results'\n  });\n  const onSubmit = data => {\n    if (data.questions.length < 2) {\n      return setError('The test must have at least 2 questions');\n    } else if (data.results.length < 2) {\n      return setError('The test must have at least 2 results');\n    }\n    let score = 0;\n    for (let i = 0; i < data.questions.length; i++) {\n      for (let j = 0; j < 4; j++) {\n        score += Number(data.questions[i].answers[j].points);\n      }\n    }\n    setScore(score);\n    for (let i = 0; i < data.results.length; i++) {\n      let iMinScore = Number(data.results[i].minScore);\n      let iMaxScore = Number(data.results[i].maxScore);\n      if (iMinScore > score || iMaxScore > score) {\n        return setError('Min or max score of result can\\'t be greater than the total score');\n      } else if (iMinScore > iMaxScore) {\n        return setError('Min score of result can\\'t be greater than max score');\n      } else if (iMinScore < 0 || iMaxScore < 0) {\n        return setError('Min or max score of result can\\'t be less than 0');\n      }\n      if (i < data.results.length - 1) {\n        for (let j = i + 1; j < data.results.length; j++) {\n          let jMinScore = Number(data.results[j].minScore);\n          let jMaxScore = Number(data.results[j].maxScore);\n          if (iMinScore < jMinScore && iMaxScore > jMaxScore) {\n            return setError(`Invalid scores in results  №${i} and  №${j}`);\n          } else if (iMinScore > jMinScore && iMaxScore < jMaxScore) {\n            return setError(`Invalid scores in results  №${i} and  №${j}`);\n          } else if (iMinScore === jMinScore || iMaxScore === jMaxScore) {\n            console.log(iMinScore, jMinScore);\n            console.log(iMaxScore, jMaxScore);\n            return setError(`Invalid scores in results  №${i} and  №${j}`);\n          } else if (iMinScore === jMaxScore) {\n            return setError(`Invalid scores in results  №${i} and  №${j}`);\n          }\n        }\n      }\n    }\n    createPost(data.name, data.description, data.questions, data.results, score);\n    setError('');\n  };\n  const addQuestion = () => {\n    appendQuestion({\n      question: '',\n      answers: [{\n        answer: '',\n        points: 0\n      }, {\n        answer: '',\n        points: 0\n      }, {\n        answer: '',\n        points: 0\n      }, {\n        answer: '',\n        points: 0\n      }]\n    });\n  };\n  function removeQuestion(index) {\n    unregister(`questions.${index}.question`);\n    for (let i = 0; i < 4; i++) {\n      unregister(`questions.${index}.answers.${i}.answer`);\n      unregister(`questions.${index}.answers.${i}.points`);\n    }\n    delete questionFields[index];\n  }\n  function removeResult(index) {\n    unregister(`results.${index}.result`);\n    unregister(`results.${index}.minScore`);\n    unregister(`results.${index}.maxScore`);\n    delete resultFields[index];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.main,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          ...register('name', {\n            required: 'This field is required',\n            minLength: {\n              value: 5,\n              message: 'Name must contain at least 5 characters'\n            },\n            maxLength: {\n              value: 60,\n              message: 'Name can contain maximum 60 characters'\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.error,\n          children: ((_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message) && ((_errors$name2 = errors.name) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: styles.textarea,\n          ...register('description', {\n            required: 'This field is required',\n            minLength: {\n              value: 10,\n              message: 'Description must contain at least 10 characters'\n            },\n            maxLength: {\n              value: 300,\n              message: 'Description can contain maximum 300 characters'\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.error,\n          children: ((_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message) && ((_errors$description2 = errors.description) === null || _errors$description2 === void 0 ? void 0 : _errors$description2.message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), questionFields.map((field, index) => {\n          var _errors$questions, _errors$questions2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.nestedFormGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Question  \\u2116\", index]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ...register(`questions.${index}.question`, {\n                required: 'This field is required',\n                minLength: {\n                  value: 10,\n                  message: 'Question must contain at least 5 characters'\n                },\n                maxLength: {\n                  value: 200,\n                  message: 'Question can contain maximum 60 characters'\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: styles.error,\n              children: ((_errors$questions = errors.questions) === null || _errors$questions === void 0 ? void 0 : _errors$questions.message) && ((_errors$questions2 = errors.questions) === null || _errors$questions2 === void 0 ? void 0 : _errors$questions2.message)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Answers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), field.answers.map((answer, aIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.answerGroup,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                ...register(`questions.${index}.answers.${aIndex}.answer`, {\n                  required: 'This field is required',\n                  minLength: {\n                    value: 5,\n                    message: 'Answer must contain at least 5 characters'\n                  },\n                  maxLength: {\n                    value: 200,\n                    message: 'Answer can contain maximum 200 characters'\n                  }\n                }),\n                placeholder: `Answer ${aIndex + 1}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                ...register(`questions.${index}.answers.${aIndex}.points`, {\n                  required: 'This field is required'\n                }),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\",\n                  children: \"0\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1\",\n                  children: \"1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2\",\n                  children: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"3\",\n                  children: \"3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)]\n            }, aIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeQuestion(index),\n              children: \"Remove question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)]\n          }, field.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => addQuestion(),\n          children: \"Add question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), resultFields.map((field, index) => {\n          var _resultFields, _resultFields2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.nestedFormGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Result  \\u2116\", index]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: `results[${index}].result`,\n              ...register(`results.${index}.result`, {\n                required: 'This field is required',\n                minLength: {\n                  value: 10,\n                  message: 'Result must contain at least 10 characters'\n                },\n                maxLength: {\n                  value: 500,\n                  message: 'Result can contain maximum 500 characters'\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              value: Number((_resultFields = resultFields[index - 1]) === null || _resultFields === void 0 ? void 0 : _resultFields.maxScore) + 1 || 0,\n              ...register(`results.${index}.minScore`, {\n                required: 'This field is required',\n                value: Number((_resultFields2 = resultFields[index - 1]) === null || _resultFields2 === void 0 ? void 0 : _resultFields2.maxScore) + 1 || 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              ...register(`results.${index}.maxScore`, {\n                required: 'This field is required'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeResult(index),\n              children: \"Remove result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this)]\n          }, field.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.error,\n          children: ((_errors$results = errors.results) === null || _errors$results === void 0 ? void 0 : _errors$results.message) && ((_errors$results2 = errors.results) === null || _errors$results2 === void 0 ? void 0 : _errors$results2.message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => appendResult({\n            result: '',\n            minScore: 0,\n            maxScore: 0\n          }),\n          children: \"Add Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.error,\n        children: formError && formError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), id ? /*#__PURE__*/_jsxDEV(NavLink, {\n        to: `/test/${id}`,\n        children: \"View test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 73\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(TestForm, \"JcbzfP2h6GVxlp5MqyFKPhJ8DcI=\", false, function () {\n  return [useTestStore, useTestStore, useTestStore, useTestStore, useTestStore, useForm, useFieldArray, useFieldArray];\n});\n_c = TestForm;\n;\nvar _c;\n$RefreshReg$(_c, \"TestForm\");","map":{"version":3,"names":["React","styles","useTestStore","useForm","useFieldArray","NavLink","jsxDEV","_jsxDEV","TestForm","_s","_errors$name","_errors$name2","_errors$description","_errors$description2","_errors$results","_errors$results2","formError","state","setError","setFormError","setScore","createPost","createTest","id","createdTestId","register","control","handleSubmit","formState","errors","unregister","mode","fields","questionFields","append","appendQuestion","name","resultFields","appendResult","onSubmit","data","questions","length","results","score","i","j","Number","answers","points","iMinScore","minScore","iMaxScore","maxScore","jMinScore","jMaxScore","console","log","description","addQuestion","question","answer","removeQuestion","index","removeResult","className","main","children","form","formGroup","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","required","minLength","value","message","maxLength","error","textarea","map","field","_errors$questions","_errors$questions2","nestedFormGroup","aIndex","answerGroup","placeholder","onClick","_resultFields","_resultFields2","result","to","_c","$RefreshReg$"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/pages/testForm/TestForm.tsx"],"sourcesContent":["import React from 'react';\r\nimport styles from './TestForm.module.scss';\r\nimport useTestStore, { IQuestion, Result } from '../../stores/testStore';\r\nimport { useForm, SubmitHandler, useFieldArray } from 'react-hook-form';\r\nimport { NavLink, redirect } from 'react-router-dom';\r\n\r\ntype FormValues = {\r\n    name: string,\r\n    description: string,\r\n    questions: IQuestion[],\r\n    results: Result[]\r\n}\r\n\r\n\r\nexport default function TestForm() {\r\n    const formError = useTestStore(state => state.formError);\r\n    const setError = useTestStore(state => state.setFormError);\r\n    const setScore = useTestStore(state => state.setScore);\r\n    const createPost = useTestStore(state => state.createTest);\r\n    const id = useTestStore(state => state.createdTestId)\r\n\r\n    const { register, control, handleSubmit, formState: { errors }, unregister } = useForm<FormValues>({\r\n        mode: 'onBlur'\r\n    });\r\n    const { fields: questionFields, append: appendQuestion } = useFieldArray({\r\n        control,\r\n        name: 'questions'\r\n    });\r\n    const { fields: resultFields, append: appendResult } = useFieldArray({\r\n        control,\r\n        name: 'results'\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n        if (data.questions.length < 2) {\r\n            return setError('The test must have at least 2 questions');\r\n        } else if (data.results.length < 2) {\r\n            return setError('The test must have at least 2 results');\r\n        }\r\n        let score = 0;\r\n        for (let i = 0; i < data.questions.length; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                score += Number(data.questions[i].answers[j].points);\r\n            }\r\n        }\r\n        setScore(score);\r\n        for (let i = 0; i < data.results.length; i++) {\r\n            let iMinScore = Number(data.results[i].minScore);\r\n            let iMaxScore = Number(data.results[i].maxScore);\r\n            if (iMinScore > score || iMaxScore > score) {\r\n                return setError('Min or max score of result can\\'t be greater than the total score');\r\n            } else if (iMinScore > iMaxScore) {\r\n                return setError('Min score of result can\\'t be greater than max score');\r\n            } else if (iMinScore < 0 || iMaxScore < 0) {\r\n                return setError('Min or max score of result can\\'t be less than 0');\r\n            }\r\n\r\n            if (i < data.results.length - 1) {\r\n                for (let j = i + 1; j < data.results.length; j++) {\r\n                    let jMinScore = Number(data.results[j].minScore);\r\n                    let jMaxScore = Number(data.results[j].maxScore);\r\n                    if (iMinScore < jMinScore && iMaxScore > jMaxScore) {\r\n                        return setError(`Invalid scores in results  №${i} and  №${j}`);\r\n                    } else if (iMinScore > jMinScore && iMaxScore < jMaxScore) {\r\n\r\n                        return setError(`Invalid scores in results  №${i} and  №${j}`);\r\n                    } else if (iMinScore === jMinScore || iMaxScore === jMaxScore) {\r\n                        console.log(iMinScore, jMinScore);\r\n                        console.log(iMaxScore, jMaxScore)\r\n                        return setError(`Invalid scores in results  №${i} and  №${j}`);\r\n                    } else if (iMinScore === jMaxScore) {\r\n                        return setError(`Invalid scores in results  №${i} and  №${j}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        createPost(data.name, data.description, data.questions, data.results, score)\r\n        setError('')\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        appendQuestion({\r\n            question: '',\r\n            answers: [\r\n                { answer: '', points: 0 },\r\n                { answer: '', points: 0 },\r\n                { answer: '', points: 0 },\r\n                { answer: '', points: 0 }\r\n            ]\r\n        });\r\n    };\r\n\r\n    function removeQuestion(index: number) {\r\n        unregister(`questions.${index}.question`);\r\n        for (let i = 0; i < 4; i++) {\r\n            unregister(`questions.${index}.answers.${i}.answer`);\r\n            unregister(`questions.${index}.answers.${i}.points`);\r\n        }\r\n        delete questionFields[index];\r\n    }\r\n\r\n    function removeResult(index: number) {\r\n        unregister(`results.${index}.result`);\r\n        unregister(`results.${index}.minScore`);\r\n        unregister(`results.${index}.maxScore`);\r\n\r\n        delete resultFields[index];\r\n    }\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={styles.formGroup}>\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input type=\"text\" id=\"name\" {...register('name', {\r\n                        required: 'This field is required',\r\n                        minLength: { value: 5, message: 'Name must contain at least 5 characters' },\r\n                        maxLength: { value: 60, message: 'Name can contain maximum 60 characters' },\r\n                    }\r\n                    )} />\r\n                    <p className={styles.error}>{errors.name?.message && errors.name?.message}</p>\r\n                </div>\r\n\r\n                <div className={styles.formGroup}>\r\n                    <label >Description</label>\r\n                    <textarea className={styles.textarea} {...register('description', {\r\n                        required: 'This field is required',\r\n                        minLength: { value: 10, message: 'Description must contain at least 10 characters' },\r\n                        maxLength: { value: 300, message: 'Description can contain maximum 300 characters' },\r\n                    })} />\r\n                    <p className={styles.error}>{errors.description?.message && errors.description?.message}</p>\r\n                </div>\r\n\r\n                <div className={styles.formGroup}>\r\n                    <label>Questions</label>\r\n                    {questionFields.map((field, index) => (\r\n                        <div key={field.id} className={styles.nestedFormGroup}>\r\n                            <label>Question  №{index}</label>\r\n                            <input type='text' {...register(`questions.${index}.question`, {\r\n                                required: 'This field is required',\r\n                                minLength: { value: 10, message: 'Question must contain at least 5 characters' },\r\n                                maxLength: { value: 200, message: 'Question can contain maximum 60 characters' },\r\n                            })} />\r\n                            <p className={styles.error}>{errors.questions?.message && errors.questions?.message}</p>\r\n                            <label>Answers</label>\r\n                            {field.answers.map((answer, aIndex) => (\r\n                                <div key={aIndex} className={styles.answerGroup}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        {...register(`questions.${index}.answers.${aIndex}.answer`, {\r\n                                            required: 'This field is required',\r\n                                            minLength: { value: 5, message: 'Answer must contain at least 5 characters' },\r\n                                            maxLength: { value: 200, message: 'Answer can contain maximum 200 characters' },\r\n                                        })}\r\n                                        placeholder={`Answer ${aIndex + 1}`}\r\n                                    />\r\n\r\n                                    <select {...register(`questions.${index}.answers.${aIndex}.points`, { required: 'This field is required' })}>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                    </select>\r\n                                </div>\r\n                            ))}\r\n                            <button type=\"button\" onClick={() => removeQuestion(index)}>Remove question</button>\r\n                        </div>\r\n                    ))}\r\n                    <button type=\"button\" onClick={() => addQuestion()}>Add question</button>\r\n                </div>\r\n\r\n                <div className={styles.formGroup}>\r\n                    <label>Results</label>\r\n                    {resultFields.map((field, index) => (\r\n                        <div key={field.id} className={styles.nestedFormGroup}>\r\n                            <label>Result  №{index}</label>\r\n                            <input id={`results[${index}].result`} {...register(`results.${index}.result`, {\r\n                                required: 'This field is required',\r\n                                minLength: { value: 10, message: 'Result must contain at least 10 characters' },\r\n                                maxLength: { value: 500, message: 'Result can contain maximum 500 characters' },\r\n                            })} />\r\n\r\n                            <label>Min Score</label>\r\n                            <input value={(Number(resultFields[index - 1]?.maxScore) + 1) || 0} {...register(`results.${index}.minScore`, { required: 'This field is required', value: (Number(resultFields[index - 1]?.maxScore) + 1) || 0 })} />\r\n\r\n                            <label>Max Score</label>\r\n                            <input type=\"number\" {...register(`results.${index}.maxScore`, { required: 'This field is required' })} />\r\n                            <button type=\"button\" onClick={() => removeResult(index)}>Remove result</button>\r\n                        </div>\r\n                    ))}\r\n                    <p className={styles.error}>{errors.results?.message && errors.results?.message}</p>\r\n                    <button type=\"button\" onClick={() => appendResult({ result: '', minScore: 0, maxScore: 0 })}>Add Result</button>\r\n                </div>\r\n\r\n                <p className={styles.error}>{formError && formError}</p>\r\n                <button type=\"submit\">Submit</button>\r\n                {id ? <NavLink to={`/test/${id}`}>View test</NavLink> : <button type=\"submit\">Submit</button>}\r\n            </form >\r\n        </div>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}