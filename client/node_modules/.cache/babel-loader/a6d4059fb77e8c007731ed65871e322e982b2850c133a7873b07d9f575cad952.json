{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport API from './../api/axiosConfig';\nimport { redirect } from 'react-router-dom';\nconst useAuthStore = create()(devtools(immer((set, get) => ({\n  errText: '',\n  register: async (email, username, password) => {\n    await API.post(`/auth/register`, {\n      email,\n      username,\n      password\n    });\n  },\n  login: async (email, password) => {\n    await API.post(`/auth/login`, {\n      email,\n      password\n    }).then(data => {\n      if (data.data.accessToken) {\n        localStorage.setItem('token', data.data.accessToken);\n        redirect('/');\n      } else {\n        set({\n          errText: 'Invalid email or password'\n        });\n      }\n    });\n  },\n  setError: err => {\n    set({\n      errText: err\n    });\n  }\n}))));\nexport default useAuthStore;","map":{"version":3,"names":["create","devtools","immer","API","redirect","useAuthStore","set","get","errText","register","email","username","password","post","login","then","data","accessToken","localStorage","setItem","setError","err"],"sources":["C:/Users/DoC/Desktop/works/ptest/client/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport API from './../api/axiosConfig';\r\nimport { AxiosResponse } from 'axios';\r\nimport { redirect } from 'react-router-dom';\r\n\r\ninterface IStore {\r\n    errText: string,\r\n    register: (email: string, username: string, password: string) => void,\r\n    login: (email: string, password: string) => void,\r\n    setError: (err: string) => void\r\n}\r\n\r\nconst useAuthStore = create<IStore>()(devtools(immer((set, get) => ({\r\n    errText: '',\r\n    register: async (email: string, username: string, password: string) => {\r\n        await API.post(`/auth/register`, { email, username, password });\r\n    },\r\n    login: async (email: string, password: string) => {\r\n        await API.post(`/auth/login`, { email, password }).then((data: AxiosResponse<any>) => {\r\n            if(data.data.accessToken) {\r\n                localStorage.setItem('token', data.data.accessToken);\r\n                redirect('/');\r\n            } else {\r\n                set({errText: 'Invalid email or password'});\r\n                \r\n            }\r\n            \r\n        });\r\n    },\r\n    setError: (err: string) => {\r\n        set({ errText: err });\r\n    }\r\n})\r\n),\r\n),\r\n);\r\n\r\nexport default useAuthStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,GAAG,MAAM,sBAAsB;AAEtC,SAASC,QAAQ,QAAQ,kBAAkB;AAS3C,MAAMC,YAAY,GAAGL,MAAM,CAAS,CAAC,CAACC,QAAQ,CAACC,KAAK,CAAC,CAACI,GAAG,EAAEC,GAAG,MAAM;EAChEC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,EAAEC,QAAgB,KAAK;IACnE,MAAMT,GAAG,CAACU,IAAI,CAAC,gBAAgB,EAAE;MAAEH,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,CAAC;EACnE,CAAC;EACDE,KAAK,EAAE,MAAAA,CAAOJ,KAAa,EAAEE,QAAgB,KAAK;IAC9C,MAAMT,GAAG,CAACU,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEE;IAAS,CAAC,CAAC,CAACG,IAAI,CAAEC,IAAwB,IAAK;MAClF,IAAGA,IAAI,CAACA,IAAI,CAACC,WAAW,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACA,IAAI,CAACC,WAAW,CAAC;QACpDb,QAAQ,CAAC,GAAG,CAAC;MACjB,CAAC,MAAM;QACHE,GAAG,CAAC;UAACE,OAAO,EAAE;QAA2B,CAAC,CAAC;MAE/C;IAEJ,CAAC,CAAC;EACN,CAAC;EACDY,QAAQ,EAAGC,GAAW,IAAK;IACvBf,GAAG,CAAC;MAAEE,OAAO,EAAEa;IAAI,CAAC,CAAC;EACzB;AACJ,CAAC,CACD,CACA,CACA,CAAC;AAED,eAAehB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}